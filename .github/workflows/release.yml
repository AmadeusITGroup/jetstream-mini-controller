---
name: Release workflow

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: "Default version to use when preparing a release."
        required: true
        default: "X.Y.Z"
      developmentVersion:
        description: "Default version to use for new local working copy."
        required: true
        default: "X.Y.Z-SNAPSHOT"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ 11 ]
    name: Build with Java ${{ matrix.java-version }}
    steps:
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0
      - name: Repo checkout
        uses: actions/checkout@v3
      - name: Configure Git author
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      - name: Java setup
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: temurin
      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Prepare release
        run: |
          mvn versions:set -DnewVersion=${{ github.event.inputs.releaseVersion }}
          git commit -a -m "Prepare release ${{ github.event.inputs.releaseVersion }}"
      - name: Build and deploy with Maven
        run: |
          mvn -B clean deploy -PCIDeployment
      - name: Finalize release
        run: |
          git tag ${{ github.event.inputs.releaseVersion }}      
          mvn versions:set -DnewVersion=${{ github.event.inputs.developmentVersion }}
          git commit -a -m "Prepare next release ${{ github.event.inputs.developmentVersion }}"
      - name: Push changes to main
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
      - name: Push tags
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tags: true
          branch: main
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.event.inputs.releaseVersion }}
          release_name: ${{ github.event.inputs.releaseVersion }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./target/helm/jetstream-mini-controller-${{ github.event.inputs.releaseVersion }}.tgz
          asset_name: jetstream-mini-controller-${{ github.event.inputs.releaseVersion }}.tgz
          asset_content_type: application/gzip
      - name: Pull from Main
        run: |
          git pull --rebase origin main
      - name: Update helm repo index
        run: |
          owner=$(cut -d '/' -f 1 <<< "$GITHUB_REPOSITORY")
          repo=$(cut -d '/' -f 2 <<< "$GITHUB_REPOSITORY")
          install="$RUNNER_TOOL_CACHE/cr/1.4.1/$(uname -m)"
          echo "$install" >> "$GITHUB_PATH"
          args=(--owner "$owner" --repo "$repo")
          args+=(--install-dir "$install")
          args+=(--chart-tar "target/helm/jetstream-mini-controller-${{ github.event.inputs.releaseVersion }}.tgz")
          args+=(--charts-repo-url "https://AmadeusITGroup.github.io/jetstream-mini-controller")
          "./cr.sh" "${args[@]}"
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        shell: bash      
